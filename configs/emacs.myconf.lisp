;; TODO
;; (def task-2 "find-mostly-used-emacs-shortcuts")
;; (def task-1 "find-package-shortcuts")
;; (def task-0 "find-function-shortcuts")
;; (def task-1 "find-emacs-shortcuts")
;; (def task-2 "find-emacs-packages")
;; (def task-3 "find-terminal-config-shortuct-and-configs")
;; (def task-4 "read-about-writing-embedded-functions-and-their-call")
;; (def tesk-5 "read-about-basic-navigation-in-emacs")
;; (def task-6 "reconfig-emacs.conf file")
;; (def task-7 "read-about-emacs-inside-terminal")
;; (def task-8 "search-about-emacs-inside-browser")
;; (def task-9 "think-about-species-organisation")
;; (def task-10 "think-about-neural-neourveus")
;; (def task-11 "implement-own-number-species")
;; (def task-12 "reconfigure-emacs-keybinds")
;; (def task-13 "implement-own-language-system-species-for-browsers")
;; (def task-14 "read-about-configuration-layers")
;; (def task-15 "read-about-configuration-matrices")
;; (def task-16 "create-mode-for-configuration-hilbert-spaces")
;; (def task-17 "read-about-compilers")
;; (def task-18 "implement-matematical-structures-as-mathematical-species")
;; (def task-21 "search-for-emacs-packages")
;; (def task-22 "think-about-emacs-configuration")
;; (def task-23 "search-some-lisp-gui-library")
;; (def task-24 "how-to-use-git-from-emacs")
;; (def task-25 "where-to-find-emacs-config-file")
;; (def task-26 "look-around-and-find-a-key-in-alibaba)
;; (def task-28 "find-file-or-folder-setup-config-in-emacs")
;; (def task-29 "tune-autocomplete-window-pop-speed")
;; (def task-30 "line-number-turn-on-on-autocomplete-window")
;; (def task-31 "project-left-side-autocomplete-window-with-map")
;; (def task-32 "check-how-to-configure-emacs-for-docket-and-")
;; (def task-27 "find-the-best-mechanical-keyboard-for-programmers")
;; (def task-33 "find-a-display-multiplexer")
;; (def task-34 "read-about-how-to-have-a-bootable-usb-linux-system")
;; (def task-35 "read-about-how-to-have-a-external-video-card")
;; (def task-36 "order-cables-for-lg-monitor")
;; (def task-37 "download-lisp-plugin-and-compiler-for-lisp")
;; (def task-37 "learn-10-finger-typing")
;; (def task-38 "write-my-own-pdf-viewer")
;; (def task-39 "research-about-fast-typing-and-writing")
;; (def task-40 "research-about-emacs-configuration")
;; (def task-41 "research-about-vim-configuration")
;; (def task-42 "create-my-own-file-types-species-and-write-a-pre-compiler")
;; (def task-43 "create-my-own-markup-language")
;; (def task-44 "create-my-own-pre-markup-language")
;; (def task-45 "create-my-own-pre-markup-language")
;; (def task-46 "think-about-variable-space")

;; IN-PROGRESS
;;
;; DONE


(defn change-color-and-theme-style-based-on-[])
(defn change-color-and-theme-style-based-on-coding-style[])
(defn change-color-and-theme-style-based-on-writing-style[])
(defn change-color-and-theme-style-based-on-temperature[])
(defn image-recognition-bills-and-return-counting[])
(defn image-recognition-read-text-return-html[])
(defn generate-md-file-based-on-my-indent-and-markup-style[style])
(defn generate-md-markup-in-comment[])
(defn color-variables-and-functions-and-datastructures-in-comments[language])
(defn delete-all-words-and-chars-in-strings)
(defn download-all-compilers-languages-packgages-and-meta-files[config])
(defn organise-functions-based-on-gender[])
(defn find-file-or-folder-on-keypress[])
(defn auto-refactor-function-names-in-code[])
(defn auto-refactor-variable-names-in-code[])
(defn boot-operating-system-species-from-usb[])
(defn hdd-recovery[])
(defn make-bootable-operating-system[])
(defn color-terminal[stlye-species])
(defn kill-terminal-buffer [])
(defn count-typing-speed[])
(defn count-function-species-written-in-a-month[])
(defn count-function-species-written-in-a-week[])
(defn count-function-species-written-today[])
(defn count-function-species-written-in-hour[])
(defn change-to-3d[])
(defn change-to-meta-symbol-mode[])
(defn change-layer-species[])
(defn analise-function-genetics[])
(defn analise-data-species-genetic[])
(defn generate-information-live-cycle[])
(defn generate-function-live-cycle[])
(defn generate-meta-species-for-functions[])
(defn generate-meta-species-for-objects[])
(defn generate-meta-species-for-build-in-data-sctructures[language])
(defn generate-data-sprecies-based-on-used-langugage[])
(defn color-buffer-data-based-on-language-species[])
(defn load-json[load-style])
(defn load-bson[load-style])
(defn load-xml[load-stlye])
(defn load-html[load-stlye])
(defn load-configuration-matrix[])
(defn search-in-task-based-on-information-flow[])
(defn search-in-task-based-on-hashes[])
(defn search-in-tasks-based-on-bitput[])
(defn open-inside-terminal[])
(defn close-inside-terminal[])
(defn classsify-task-spcecies-based-on-word-species[])
(defn open-inside-browser[])
(defn close-inside-browser[])
(defn change-language-symbols[language-style-species])
(defn color-return-terminal-style[])
(defn color-word-separator-slash[])
(defn load-coding-style[])
(defn turn-on-language-interpolation[])
(defn generate-function-species-metadata[])
(defn generate-data-species-metadata[])
(defn color-systanx-in-comment[x])
(defn turn-language-style-to-mathematical-symbol-species[])
(defn turn-on-minimap[])
(defn turn-of-minimap[])
(defn move-word-to-unknown-word-matrix[])
(defn metacompiler-species[langage-sytanx])
(defn show-unknow-function-meaning[language])
(defn list-avaible-functions-species[])
(defn list-all-avaible-packages-based-on-technology-graph[])
(defn list-all-avaible-packages-based-on-call-number[])
(defn list-all-avaible-packages-based-on-return-value[])
(defn genreate-scrum-table-onto-function[])
(defn generate-subspcies-of-informaction-with-style-and-inbuild-modifiers[])
(defn auto-indent-scrumboard-task-species[])
(defn auto-color-word-start-letters[])
(defn auto-load-words-based-on-typing-and-coding-style[])
(defn genarate-react-project-based-on-template-metafile-and-data-species[])
(defn auto-generate-task-based-on-task-species[])
(defn auto-organise-functions-based-on-creation-data[])
(defn auto-organise-functions-based-on-function-call-number[])
(defn auto-organise-functions-based-on-alphabet[])
(defn auto-organise-functions-based-on-alphabet-reverse[])
(defn auto-organise-packages-based-on-creation-data[])
(defn auto-organise-packages-based-on-function-call-number[])
(defn auto-organise-packages-based-on-alphabet[])
(defn auto-organise-packages-based-on-alphabet-reverse[])
(defn auto-load-function-to-repl[])
(defn auto-generate-sql-model-to-data-spcies[])
(defn auto-generete[])
(defn auto-commit-function[])
(defn auto-commit-comment [])
(defn auto-commut-data-spcies [])
(defn auto-commuit[])
(defn change-language-mode[])
(defn color-underscore-casing-type [])
(defn color-underline-casing-type[])
(defn color-camel-case-casing-type [])
(defn generate-task-string-while-writing-task[])
(defn generate-task-data-and-use-task-algorithms-based-on-task-species[])
(defn change-character-set[])
(defn change-data-structure[])
(defn change-writing-stlyle-left-to-right[])
(defn change-writing-stlyer-right-to-left[])
(defn load-windows-and-config-based-on-project-metadata[])
(defn find-task-by-id-on-srcum-board[])
(defn find-task-by-regular-expression-on-scrum-board[])
(defn generate-scrum-board[])
(defn show-scrum-board[])
(defn show-in-progress-task-in-scrum-board[board])
(defn generate-on-space-snake-casing[])
(defn generate-on-space-camel-casing[])
(defn generate-on-space-)
(defn auto-implement-function-and-refactor-loadable-functions[])
(defn auto-sort-task-based-on-priority-matrix [])
(defn auto-sort-functions-based-on-metadata[])
(defn generate-todo-task-type[])
(defn generate-todo-function-type[])
(defn change-string-type-modifier [])
(defn change-langauge-to-hungarian [])
(defn change-language-to-english [])
(defn change-color-theme[];)
(defn show-avaible-color-themes[])
(defn turn-on-line-numbers[])
(defn turn-of-line-number[])
(defn auto-move-task-to-in-progress-while-task-started[])
(defn auto-move-task-to-done-while-progress-done[])
(defn generate-comment-while-in-commenting-mode[])
(defn generate-meta-function-based-on-comment-fn[])
(defn generete-meta-file [])
(defn save-file-after-finsihed-sentece[])
(defn generete-js-file-ending[])
(defn show-emacs-shortcuts [type])
(defn generate-meta-comment [comment])
(defn comment-analiser[])
(defn parser-html[])
(defn parse-pdf [])
(defn parse-json [])
(defn parse-xml [])
(defn parse-bson[])
(defn jump-to-end-of-datastructre-scope [])
(defn generate-js-object-meta-structure[])
(defn generate-js-object-line-ending[])
(defn generate-js-template-string-while-writing-js-object[])
(defn generate-auto-lisp-brackets-while-insert-file[])
